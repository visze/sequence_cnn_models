# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

import itertools


report: "report/workflow.rst"


# Allow users to fix the underlying OS via singularity.
container: "docker://continuumio/miniconda3"


##### check snakemake min version #####

from snakemake.utils import min_version

min_version("7.15.2")


module wrappers:
    """
    Import wrapper repository.
    """
    snakefile:
        "%s/Snakefile" % config["wrapper_directory"]


include: "rules/common.smk"
include: "rules/sequence_selection_common.smk"
include: "rules/sequence_selection.smk"
include: "rules/regression_input.smk"
include: "rules/training.smk"
include: "rules/predict.smk"
include: "rules/correlation.smk"
include: "rules/model_interpretation.smk"
include: "rules/plot/common.smk"
include: "rules/plot_ism.smk"
include: "rules/plot/satmut.smk"


if not isRegression():

    rule all:
        input:
            "results/training/model.classification.json",
            expand(
                "results/predictions/{test_name}.labeled.tsv.gz",
                test_name=list(tests.index),
            ),
            expand(
                "results/model_interpretation/{prediction_fasta}/tfmodisco-lite/report.{target_id}/motifs.html",
                prediction_fasta=config["input"]["fasta"].keys(),
                target_id=list(range(0, config["prediction"]["output_size"])),
            ),


if isRegression():

    rule all:
        input:
            getRegressionTraining_all(),
            expand(
                "results/model_interpretation/ism/tfmodisco-lite/report.{target_id}/motifs.html",
                target_id=list(range(0, config["prediction"]["output_size"])),
            ),
            expand(
                "results/correlation/regression.{target_name}.tsv.gz",
                target_name=config["prediction"]["output_names"],
            ),
            "results/predictions/finalConcat.labels.cleaned.tsv.gz",
            expand(
                "results/plot/satmut/{region}.{target}/{plot}.pdf",
                plot=[
                    "heatmap.all",
                    "heatmap.sign",
                    "scatter.all",
                    "scatter.sign",
                    "satmut",
                ],
                region=satmut.keys(),
                target=range(0, config["prediction"]["output_size"]),
            ),
            #expand(
            #    "results/plot_ism/plots/{region}.{output}/example_0.pdf",
            #    region=config["ism_regions"].keys(),
            #    output=range(0, config["prediction"]["output_size"]),
            #),

    rule all_satmut:
        input:
            expand(
                "results/plot/satmut/{region}.{target}/{plot}.pdf",
                plot=[
                    "heatmap.all",
                    "heatmap.sign",
                    "scatter.all",
                    "scatter.sign",
                    "satmut",
                ],
                region=satmut.keys(),
                target=range(0, config["prediction"]["output_size"]),
            ),
